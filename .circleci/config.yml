version: 2
jobs:
  build:
    parallelism: 3
    docker:
      - image: ruby:2.4.0
        environment:
          BUNDLE_JOBS: 3
          BUNDLE_RETRY: 3
          BUNDLE_PATH: vendor/bundle
          PGHOST: 127.0.0.1
          PGUSER: postgres
          RAILS_ENV: test
      - image: circleci/postgres:9.5-alpine
        environment:
          POSTGRES_USER: postgres
          POSTGRES_DB: task-manager-api
          POSTGRES_PASSWORD: postgres
    steps:
      - checkout

      # Which version of bundler?
      - run:
          name: Which bundler?
          command: bundle -v

      # Restore bundle cache
      - restore_cache:
          keys:
            - task-manager-api-bundle-v2-{{ checksum "Gemfile.lock" }}
            - task-manager-api-bundle-v2-

      - run:
          name: Bundle Install
          command: bundle check || bundle install

      # Store bundle cache
      - save_cache:
          key: task-manager-api-bundle-v2-{{ checksum "Gemfile.lock" }}
          paths:
            - vendor/bundle

      # Only necessary if app uses webpacker or yarn in some other way
      # - restore_cache:
      #     keys:
      #       - task-manager-api-yarn-{{ checksum "yarn.lock" }}
      #       - task-manager-api-yarn-
      #
      # - run:
      #     name: Yarn Install
      #     command: yarn install --cache-folder ~/.cache/yarn

      # Store yarn / webpacker cache
      # - save_cache:
      #     key: task-manager-api-yarn-{{ checksum "yarn.lock" }}
      #     paths:
      #       - ~/.cache/yarn

      # - run:
      #     name: Wait for DB
      #     command: dockerize -wait tcp://localhost:5432 -timeout 1m

      # - run:
      #     name: Database setup
      #     command: bin/rails db:schema:load --trace

      - run:
          name: Database Setup
          command: |
            bundle exec rails db:create
            bundle exec rails db:migrate
            bundle exec rails db:test:prepare

      # Run rspec in parallel
      - type: shell
        command: |
          bundle exec rspec --profile 10 \
                            --format documentation \
                            --order rand
                            --color
                            $(circleci tests glob "spec/**/*_spec.rb" | circleci tests split --split-by=timings)


      # Save test results for timing analysis
      - store_test_results:
          path: coverage
